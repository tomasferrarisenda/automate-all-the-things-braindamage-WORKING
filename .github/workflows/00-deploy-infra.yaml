name: 00-Deploy infrastructure

on:
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  # TF_LOG: INFO
  # TF_INPUT: false # This makes it so Terraform doesn't ask for confirmation when running apply

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # - name: Setup Terraform
      #     uses: hashicorp/setup-terraform@v1
      #     with:
      #         terraform_version: 1.4.6

      - name: Install terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.4.6"

      # - name: Terraform Init Backend
      #     run: |
      #         cd terraform/backend
      #         terraform init

      - name: Terraform init Backend
        run: terraform init
        working-directory: terraform/backend

      # - name: Terraform plan
      #   id: plan
      #   run: terraform plan -no-color
      #   working-directory: terraform/backend
      # #   continue-on-error: true
      # #   env:
      # #     ARM_CLIENT_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      # #     ARM_CLIENT_SECRET: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      # - run: echo ${{ steps.plan.outputs.stdout }}
      # - run: echo ${{ steps.plan.outputs.stderr }}
      # - run: echo ${{ steps.plan.outputs.exitcode }}

      - name: Terraform apply backend
      #   id: apply-backend
        run: terraform apply -auto-approve
        working-directory: terraform/backend
      #   continue-on-error: true
      #   env:
      #     ARM_CLIENT_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #     ARM_CLIENT_SECRET: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      # - name: Echo apply-backend outputs
      #   run: |
      #     echo "${{ steps.apply-backend.outputs.stdout }}"
      #     echo "${{ steps.apply-backend.outputs.stderr }}"
      #     echo "${{ steps.apply-backend.outputs.exitcode }}"

      # - name: Terraform Apply Backend
      #     run: |
      #         cd terraform/backend
      #         terraform apply -auto-approve

      - name: Move terraform state to /terraform/aws/ directory
        if: ${{ success() }}
        run: cp terraform/backend/terraform.tfstate terraform/aws

      # - name: Terraform Init Infra
      #     run: |
      #         cd terraform/aws
      #         terraform init -force-copy

      - name: Terraform init actual infrastructure
        if: ${{ always() }}
        run: terraform init -force-copy
        working-directory: terraform/aws


      # - name: Terraform Apply Infra
      #     run: |
      #         cd terraform/aws
      #         terraform apply -auto-approve

      - name: Terraform apply actual infrastructure
      #   id: apply-actual-infrastructure
        run: terraform apply -auto-approve
        working-directory: terraform/aws
        if: ${{ always() }}


      # The terraform apply takes a long time so we run a git pull in case there have been any changes on the repo
      - name: Update repo
        # run: git pull origin main
        if: ${{ always() }}
        run: git pull


      - name: Save ElastiCache DBs endpoints
        if: ${{ always() }}
        run: |
          echo "$(terraform -chdir=terraform/aws output -raw elasticache_dev_primary_endpoint_address)" > elasticache_dev_endpoint.txt
          echo "$(terraform -chdir=terraform/aws output -raw elasticache_stage_primary_endpoint_address)" > elasticache_stage_endpoint.txt
          echo "$(terraform -chdir=terraform/aws output -raw elasticache_prod_primary_endpoint_address)" > elasticache_prod_endpoint.txt

      - name: Modify values for each environment
        if: ${{ always() }}
        run: |
          sed -i "s/redis_host:.*/redis_host: $(cat elasticache_dev_endpoint.txt | tr -d '\n')/g" helm/my-app/backend/environments/values-dev.yaml
          sed -i "s/redis_host:.*/redis_host: $(cat elasticache_stage_endpoint.txt | tr -d '\n')/g" helm/my-app/backend/environments/values-stage.yaml
          sed -i "s/redis_host:.*/redis_host: $(cat elasticache_prod_endpoint.txt | tr -d '\n')/g" helm/my-app/backend/environments/values-prod.yaml

      - name: Commit changes to GitHub
        if: ${{ always() }}
        run: |
          git config --global user.email "GitHubActions@DeployInfraWorkflow.com"
          git config --global user.name "GitHub Actions - Deploy Infra Workflow"
          git add helm/my-app/backend/environments/*
          git commit -m "ElastiCache endpoints updated in environments values.yaml files by GitHub Actions"
          git push


      - name: Save SSH command
        if: ${{ always() }}
        run: |
          echo "Assuming you are on the root directory of the automate-all-the-things repo, run this:" > ssh-to-bastion.txt
          echo "chmod 400 terraform/aws/templates/private-key" >> ssh-to-bastion.txt
          echo "ssh -i terraform/aws/templates/private-key ubuntu@$(terraform -chdir=terraform/aws output -raw ssh_host)" >> ssh-to-bastion.txt
          cat ssh-to-bastion.txt

      # - name: Upload SSH command as artifact
      #     uses: actions/upload-artifact@v2
      #     with:
      #         name: SSH to bastion
      #         path: ssh-to-bastion.txt