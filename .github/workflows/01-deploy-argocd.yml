name: Deploy ArgoCD

on:
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  APP_NAME: anna


jobs:
  deploy-argocd:
    runs-on: ubuntu-latest
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install kubectl & helm
        uses: yokawasa/action-setup-kube-tools@v0.11.1
        with:
          kubectl: '1.28.2'
          helm: '3.11.2'

      - name: Configure kubeconfig
        run: aws eks --region $AWS_REGION update-kubeconfig --name $APP_NAME-cluster

      - name: Deploy ArgoCD
        run: helm install argocd -n argocd ./helm/infra/argo-cd --values ./helm/infra/argo-cd/values-custom.yaml --dependency-update --create-namespace

      # This deploys the necessary resources for ArgoCD to be able to manage itslef
      - name: Make ArgoCD self-managed & implemente App of Apps pattern
        run: |    
          # We first create an ArgoCD AppProject called "argocd" where all ArgoCD self-managment resources will exist.
          kubectl create -n argocd -f ./argo-cd/self-manage/appprojects/argocd-appproject.yaml  

          # Then we create an application that will automatically deploy any ArgoCD AppProjects we specify in the argo-cd/self-manage/appprojects/ directory.
          kubectl create -n argocd -f ./argo-cd/self-manage/argocd-appprojects-application.yaml  
          
          # Then we create an application that will monitor the helm/infra/argocd directory, the same we used to deploy ArgoCD, making ArgoCD self-managed. Any changes we apply in the helm/infra/argocd directory will be automatically applied.
          kubectl create -n argocd -f ./argo-cd/self-manage/argocd-application.yaml  

          # Finally, we create an application that will automatically deploy any ArgoCD Applications we specify in the argo-cd/applications directory (App of Apps pattern).
          kubectl create -n argocd -f ./argo-cd/self-manage/argocd-apps-application.yaml  

          # Quick access to ArgoCD UI.
          kubectl get ingress -n argocd
          kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d

      - name: Get Host Endpoint
        run : |
          while [[ $(kubectl get -n service-mesh service istio-gateway -o 'jsonpath={.status.loadBalancer.ingress[0].hostname}') == '' ]]; do
            echo "Istio Gateway is not ready. Checking again in 5 seconds..."
            sleep 5
          done
          kubectl get -n service-mesh service istio-gateway -o=jsonpath="{.status.loadBalancer.ingress[].hostname}{'\n'}" > host_endpoint.txt

      - name: Modify values
        if: always()
        run: |
          sed -i "s/host:.*/host: $(cat host_endpoint.txt | tr -d '\n') # This value was modified by the deploy-argocd pipeline/g" ./helm/my-app/frontend/values.yaml    

      - name: Commit changes to GitHub
        run: |
          git pull
          git config --global user.email "GitHubActions@SealedSecretWorkflow.com"
          git config --global user.name "GitHub Actions - Sealed Secret Workflow"
          git add ./helm/my-app/frontend/values.yaml
          git commit -m "Frontend hosts URLs updated by GitHub Actions"
          git push


# - script: |
#     echo "DEV:" > frontend_endpoints.txt
#     echo "$(cat host_endpoint.txt)/dev/" >> frontend_endpoints.txt
#     echo " " >> frontend_endpoints.txt
#     echo "STAGE:" >> frontend_endpoints.txt
#     echo "$(cat host_endpoint.txt)/stage/" >> frontend_endpoints.txt
#     echo " " >> frontend_endpoints.txt
#     echo "PROD:" >> frontend_endpoints.txt
#     echo "$(cat host_endpoint.txt)/" >> frontend_endpoints.txt
#   displayName: 'Save Endpoints'

# - task: PublishBuildArtifacts@1
#   displayName: 'Export Frontend Endpoints'
#   inputs:
#     PathtoPublish: 'frontend_endpoints.txt'
#     ArtifactName: 'Access'
#     publishLocation: 'Container'

# - script: |
#     while [[ $(kubectl get ingress -n argocd $(kubectl get ingress -n argocd | awk 'NR>1{print $1}') -o 'jsonpath={.status.loadBalancer.ingress[0].hostname}') == '' ]]; do
#       echo "Ingress is not ready. Checking again in 5 seconds..."
#       sleep 5
#     done
#     kubectl get ingress -n argocd $(kubectl get ingress -n argocd | awk 'NR>1{print $1}') -o=jsonpath="{'http://'}{.status.loadBalancer.ingress[].hostname}{'\n'}" > argocd-access.txt
#     echo "admin" >> argocd-access.txt
#     while [[ $(kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}") == '' ]]; do
#       echo "Secret is not ready. Checking again in 5 seconds..."
#       sleep 5
#     done
#     echo $(kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d) >> argocd-access.txt
#   displayName: 'Save Access'

# - task: PublishBuildArtifacts@1
#   displayName: 'Export Access'
#   inputs:
#     PathtoPublish: 'argocd-access.txt'
#     ArtifactName: 'Access'
#     publishLocation: 'Container'