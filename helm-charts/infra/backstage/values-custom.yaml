backstage:
  command: ["node", "packages/backend", "--config", "app-config.production.yaml"]

  image:
    registry: "" # This is necessary to override the default value "ghcr.io"
    repository: tferrari92/backstage
    tag: "24" # This value was modified by the backstage build and push pipeline

  extraEnvVars:
    - name: GITHUB_TOKEN
      valueFrom:
        secretKeyRef:
          name: github-token
          key: GITHUB_TOKEN

  appConfig:
    catalog:
      rules:
        - allow:
            - Component
            - API
            - Resource
            - System
            - Domain
            - Location
            - User
            - Group
            - Template

      refreshIntervalSeconds: 5 # In seconds. Default is 100

      providers:
        github:
          # Catalogs
          catalogsProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/application-code/**/*catalog-info.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-braindamage' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Resources
          resourcesProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/application-code/**/*catalog-info.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-braindamage' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # APIs
          apisProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/application-code/**/*api-info.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-braindamage' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Templates
          templatesProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/templates/**/*template.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-braindamage' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Systems
          systemsProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/systems/**/*.yaml' # this will search all folders for files that end in .yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-braindamage' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Groups
          groupsProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/groups/**/*.yaml' # this will search all folders for files that end in .yaml
            filters: # optional filters
              branch: 'main' # optional string
              repository: 'automate-all-the-things-braindamage' # optional Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Users
          usersProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/users/**/*.yaml' # this will search all folders for files that end in .yaml
            filters: # optional filters
              branch: 'main' # optional string
              repository: 'automate-all-the-things-braindamage' # optional Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

github_token: AgALisItalJF0edohxpk4YuYDjvLyjpmNbWcFscmZJ4upYJWGjzXZeCB+c9MLQyttEaXGomLmb07C88bUi4fvy+qcfc24IllU9AHQ48OdHDn3vIuRm6bWP9Y5JaDz8yq2bbBt1hh4HTUduMcq3Ug8XoD+k52TN8bz5VCpXIsASDW2mJcQbdvU7xJzImLNQJzs3Oi606+YLD3sd/XmHzh7p5I4UrRod7t0EKmx+1tZtwHj0MDbwQcpQykwReGGuUvOm8TFsFpkZ6SerOYDW5A3+7tGPfjPaXpq/oH5vF+XVzk57fmGDHTjAGClQzNy/tkn2TYu1qf3z/x4GRfJnH7tq64sLcbUxFTyiR3iSuNehVC9g/sSfg7jXwEF61ziemg9IeJJCo0VgFpaYV/F85wyLRfQWr5YRuHhELHH6HbcwRXht4D42FS9JF3Os/sczaD7qpIJUAXIdDkU6UKhgeAdEcceyymApOJmnfAhmLJcwN9nbvleoi5C0BnVZ3bc0koZPLTz49mwsDGauC+i1il/FFacxW/V8JLbycIn/ZXgFGuzjPY3P/qruwDdcmNn/GO1iPWit4s1wTLovzAcxVLX06C7UMqe4UuzeBsrmd/Gyl94McZyR697fd6eLMrbWQDoRxYroh33ImtVNnKo7km0u7WCEt+EM7JS1bjGeWCrqrcZGPbHj4b6T5zdDVRoJN6012P8ZN303SvYknDI4bNX90CQyCsrUKpfgLE6loTnteC32j119wxvvxy # This value was modified by the sealed-secrets pipeline

ingress:
  enabled: true
  annotations:
    kubernetes.io/ingress.class: alb
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: ip
    alb.ingress.kubernetes.io/healthcheck-protocol: HTTP
    alb.ingress.kubernetes.io/healthcheck-port: traffic-port
    alb.ingress.kubernetes.io/healthcheck-interval-seconds: '15'
    alb.ingress.kubernetes.io/healthcheck-timeout-seconds: '5'
    alb.ingress.kubernetes.io/success-codes: '200'
    alb.ingress.kubernetes.io/healthy-threshold-count: '2'
    alb.ingress.kubernetes.io/unhealthy-threshold-count: '2'


postgresql:
  enabled: true
  auth:
    password: "backstage" # I hard-coded a password because for some reason, when updating the backstage with a new image tag, the new backstage pod can't connect to the database:
                          # Backstage pod log: Backend failed to start up Error: Failed to connect to the database to make sure that 'backstage_plugin_catalog' exists, error: password authentication failed for user "bn_backstage"    
                          # Postgres pod log: FATAL:  password authentication failed for user "bn_backstage"

serviceAccount:
  create: true
